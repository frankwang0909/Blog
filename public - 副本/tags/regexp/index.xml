<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Regexp on Frank Wang&#39;s Coding World</title>
    <link>http://www.wangxingfeng.com/tags/regexp/index.xml</link>
    <description>Recent content in Regexp on Frank Wang&#39;s Coding World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="http://www.wangxingfeng.com/tags/regexp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JavaScript的正则表达式</title>
      <link>http://www.wangxingfeng.com/js-reg.html</link>
      <pubDate>Sun, 18 Dec 2016 21:56:37 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/js-reg.html</guid>
      <description>

&lt;h2 id=&#34;1-基本概念&#34;&gt;1.基本概念&lt;/h2&gt;

&lt;p&gt;正则表达式(&lt;code&gt;Regular Expression&lt;/code&gt;)是一个字符串，定义了某个规则，按照这种规则来描述、匹配一系列符合条件的字符串。&lt;/p&gt;

&lt;h2 id=&#34;2-通配符&#34;&gt;2.通配符&lt;/h2&gt;

&lt;p&gt;当前目录下查找文件(linux 命令行)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find ./ -name *.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-在线图形工具&#34;&gt;3.在线图形工具：&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://regexper.com/&#34;&gt;https://regexper.com/&lt;/a&gt; 是一款非常实用的正则表达式图形化工具。你也可以&lt;a href=&#34;https://regexper.com/&#34;&gt;下载&lt;/a&gt;到本地，运行速度更快&lt;/p&gt;

&lt;h2 id=&#34;4-ide中可以支持正则表达式&#34;&gt;4.IDE中可以支持正则表达式：&lt;/h2&gt;

&lt;p&gt;我用的是编辑器是&lt;code&gt;Sublime Text 3&lt;/code&gt;。快捷键&lt;code&gt;Ctrl+F&lt;/code&gt;查找字符串，&lt;code&gt;Ctrl+H&lt;/code&gt;替换字符串，在底部唤出的面板左上角有开启正则表达式（快捷键&lt;code&gt;Alt+R&lt;/code&gt;）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.wangxingfeng.com
http://m.wangxingfeng.com
http://cosmic.wangxingfeng.com
http://blog.wangxingfeng.com
http://img.wangxingfeng.com/1234.jpg
http://img.wangxingfeng.com/158.png
https://img.wangxingfeng.com/128744.jpg
http://img.wangxingfeng.com/1285.jpg
http://img.wangxingfeng.com/7884.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Sublime&lt;/code&gt;中找出上面的&lt;code&gt;url&lt;/code&gt;中&lt;code&gt;http&lt;/code&gt;协议的&lt;code&gt;jpg&lt;/code&gt;文件，去掉其协议头&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Find What: http:\/\/(.+\.jpg)
replace with: $1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-javascript中实例化-regexp-对象&#34;&gt;5.JavaScript中实例化&lt;code&gt;RegExp&lt;/code&gt;对象&lt;/h2&gt;

&lt;p&gt;5.1.字面量:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    var reg = /\d/; 
    var reg2 = /[a-zA-Z0-9]/g;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.2.构造函数:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    var reg = new RegExp(\d); 
    var reg = new RegExp(&#39;[a-zA-Z0-9]&#39;, &#39;g&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-修饰符&#34;&gt;6.修饰符：&lt;/h2&gt;

&lt;p&gt;6.1.&lt;code&gt;g&lt;/code&gt;(global):表示全局匹配，不添加则默认匹配到第一个字符串。&lt;/p&gt;

&lt;p&gt;6.2.&lt;code&gt;i&lt;/code&gt;(ignore case):表示忽略大小写,不添加则默认大小写敏感。&lt;/p&gt;

&lt;p&gt;6.3.&lt;code&gt;m&lt;/code&gt;(multiple lines):表示多行匹配。&lt;/p&gt;

&lt;h2 id=&#34;7-原意文本字符-和元字符&#34;&gt;7.原意文本字符 和元字符：&lt;/h2&gt;

&lt;p&gt;7.1.原意文本字符：表示字符的原本含义，如&lt;code&gt;a&lt;/code&gt;表示小写字母a，&lt;code&gt;1&lt;/code&gt;表示数字1。&lt;/p&gt;

&lt;p&gt;7.2.元字符：在正则表达式中有特殊含义的非字母字符，如星号&lt;code&gt;*&lt;/code&gt;，问号&lt;code&gt;？&lt;/code&gt;等。&lt;/p&gt;

&lt;p&gt;7.3.常用元字符及其含义：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）[]:构建字符类，范围类等；
2）{}:量词，表示字符的个数；
3）():构建分组；
4）*：表示任意个字符；可理解为{0,}；
5）？：表示最多有一个该字符{0,1}；
6）+：表示至少有一个该字符{1,}；
7）^: 取反；
8）\n: 换行符；
9）\r: 回车符；
10）\0: 空字符；
11）\t: 水平制表符；
12）\v:  垂直制表符；
13）\f: 换页符。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-字符类&#34;&gt;8.字符类：&lt;/h2&gt;

&lt;p&gt;8.1.通常，正则表达式一个字符对应字符串一个字符，如&lt;code&gt;/a/&lt;/code&gt;对应字母a。元字符&lt;code&gt;[]&lt;/code&gt;构建一个字符类，如&lt;code&gt;[abc]&lt;/code&gt;可以匹配字符a或b或c中的任意一个。在浏览器调试界面控制台输入：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    &#39;a1b2c3d4a&#39;.match(/[abc]/g);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会得到匹配的字符串：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;a&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;8.2字符类取反：&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;[]&lt;/code&gt;内使用元字符^创建反向类，即匹配不属于某个字符类的字符串。如&lt;code&gt;[^abc]&lt;/code&gt;匹配不是字符a、b、c的内容。
在浏览器调试界面控制台输入：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    &#39;a1b2c3d4a&#39;.match(/[^abc]/g);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会得到匹配的字符串：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    [&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;4&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;8.3范围类：&lt;/p&gt;

&lt;p&gt;1)&lt;code&gt;[a-z]&lt;/code&gt;表示：a到z的任意一个字符；&lt;/p&gt;

&lt;p&gt;在浏览器调试界面控制台输入：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    &#39;a1b2c3d4a&#39;.match(/[a-z]/g);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会得到匹配的字符串：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;a&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2)&lt;code&gt;[a-zA-Z]&lt;/code&gt;表示：a到z以及A到Z的任意一个字符。&lt;/p&gt;

&lt;p&gt;在浏览器调试界面控制台输入：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    &#39;a1B2Zc3d4&#39;.match(/[a-zA-Z]/g);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会得到匹配的字符串：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    [&amp;quot;a&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;Z&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;8.4 预定义类（简写）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1) /./ =&amp;gt; /[^\r\n]/  除了回车符和换行符之外的任何字符
2) /\d/ =&amp;gt; [0-9]  数字字符
3) /\D/ =&amp;gt; [^0-9] 非数字字符
4) /\s/ =&amp;gt; 空白字符
5) /\S/ =&amp;gt; 非空白字符
6) /\w/ =&amp;gt; [a-zA-Z0-9_]单词字符（字母，数字，下划线. 
7) /\W/ =&amp;gt; [^a-zA-Z0-9_]非单词字符
8) \b: 单词边界
9) \B：非单词边界；
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;9.量词：在字符后跟一个{}表示重复前面字符的次数。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.) /\d{1,20}/: 1~20个数字；
2.) /\d*/ =&amp;gt; /\d{0,}/: 任意个数字;
3.) /\d+/ =&amp;gt; /\d{1,}/  :至少一个数字；
4.) /\d?/ =&amp;gt; /\d{0,1}/ :之多一个数字；
5.) /\d{3}/ : 3个数字
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;10-贪婪模式与非贪婪模式&#34;&gt;10.贪婪模式与非贪婪模式：&lt;/h2&gt;

&lt;p&gt;10.1.贪婪模式：正则表达式会尽可能多地去匹配字符。&lt;/p&gt;

&lt;p&gt;例如，下面的正则表达式，匹配3到6个数字的字符串，默认会尽可能多地去匹配。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    &#39;b12345678A5879e123&#39;.match(/\d{3,6}/g)
    // [&amp;quot;123456&amp;quot;, &amp;quot;5879&amp;quot;, &amp;quot;123&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;10.2.非贪婪模式：在量词后加一个问号, 尽可能少地去匹配字符串。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    &#39;b12345678A5879e123&#39;.match(/\d{3,6}?/g)
    // [&amp;quot;123&amp;quot;, &amp;quot;456&amp;quot;, &amp;quot;587&amp;quot;, &amp;quot;123&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;11-分组&#34;&gt;11.分组：&lt;/h2&gt;

&lt;p&gt;11.1.括号“()”把字符串变成分组，使量词作用于分组。&lt;/p&gt;

&lt;p&gt;示例代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    &#39;abcabcabccc&#39;.match(/abc{3}/g); 
    // [&amp;quot;abccc&amp;quot;]

    &#39;abcabcabccc&#39;.match(/(abc){3}/g);
    // [&amp;quot;abcabcabc&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;11.2.逻辑或：竖线 “|” 作用于分组, 可以表示选择多个分支中的一个。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    &#39;whatwhaowho&#39;.match(/wh(at|o)/g)；
    // [&amp;quot;what&amp;quot;, &amp;quot;who&amp;quot;]

    &#39;whatwhaowhowhy&#39;.match(/wh(at|o|y)/g)
    // [&amp;quot;what&amp;quot;, &amp;quot;who&amp;quot;, &amp;quot;why&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;11.3.捕获分组，反向引用&lt;/p&gt;

&lt;p&gt;想要把如下日期格式化：&lt;code&gt;2016-01-20&lt;/code&gt; =&amp;gt; &lt;code&gt;01/20/2016&lt;/code&gt;；可以这样写&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    &#39;2016-01-20&#39;.replace(/(\d{4})-(\d{2})-(\d{2})/g, &amp;quot;$2/$3/$1&amp;quot;)
    // &amp;quot;01/20/2016&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;$&lt;/code&gt;加上一个数字，数字对应的是分组的序号，第一个分组的内容用&lt;code&gt;$1&lt;/code&gt;来捕获，第二分组的内容用&lt;code&gt;$2&lt;/code&gt;来捕获，以此类推。&lt;/p&gt;

&lt;p&gt;11.4.忽略分组：分组内加上&lt;code&gt;?:&lt;/code&gt;表示忽略该分组，而捕获该组的内容。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    &#39;2016-01-20&#39;.replace(/(?:\d{4})-(\d{2})-(\d{2})/g, &amp;quot;$1/$2&amp;quot;)
    // &amp;quot;01/20&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;12-断言&#34;&gt;12.断言：&lt;/h2&gt;

&lt;p&gt;12.1.正则表达式从文本头部向文本尾部开始解析，文本尾部方向称为“前”，反之，为“后”。&lt;/p&gt;

&lt;p&gt;12.2.前瞻与后顾：正则表达式匹配到规则的时候，向前检查是否符合断言，称为&amp;rdquo;前瞻&amp;rdquo;。向后检查是否符合断言则称为&amp;rdquo;后顾&amp;rdquo;。JavaScript不支持后顾。&lt;/p&gt;

&lt;p&gt;12.3.正向/肯定前瞻：向前符合断言。exp(?=assert)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    &#39;5a68cz7&#39;.match(/\d(?=[a-z])/g);
    //[&amp;quot;5&amp;quot;, &amp;quot;8&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;12.4.负向/否定前瞻：向前不符合断言。exp(?!assert)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    &#39;5a68cz7&#39;.match(/\d(?=[a-z])/g);
    // [&amp;quot;6&amp;quot;, &amp;quot;7&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;13-regexp对象属性&#34;&gt;13.RegExp对象属性&lt;/h3&gt;

&lt;p&gt;13.1.&lt;code&gt;global&lt;/code&gt;: 是否全文搜索（只读属性）;&lt;/p&gt;

&lt;p&gt;13.2.&lt;code&gt;ignoreCase&lt;/code&gt;：是否大小写敏感（只读属性）;&lt;/p&gt;

&lt;p&gt;13.3.&lt;code&gt;multline&lt;/code&gt;: 是否多行（只读属性）;&lt;/p&gt;

&lt;p&gt;13.4.&lt;code&gt;source&lt;/code&gt;：正则表达式文本内容；（只读属性）;&lt;/p&gt;

&lt;p&gt;13.5.&lt;code&gt;lastIndex&lt;/code&gt;: 当前表达式匹配内容的最后一个字符的下一个位置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    var reg1 = /\d{3,5}-\w{6}/, reg2 = /\d{3,5}-\w{6}/gim;
    reg1.global
    // false
    reg1.ignoreCase
    // false
    reg1.multiline
    // false
    reg2.global
    // true
    reg2.multiline
    // true
    reg2.ignoreCase
    // true
    reg1.source
    // &amp;quot;\d{3,5}-\w{6}&amp;quot;
    reg2.source
    // &amp;quot;\d{3,5}-\w{6}&amp;quot;
    reg1.source == reg2.source
    // true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;14-regexp的方法-test-exec&#34;&gt;14.RegExp的方法：test(), exec()&lt;/h2&gt;

&lt;p&gt;14.1.&lt;code&gt;RegExp.test(string)&lt;/code&gt;: 测试某个字符串是否能够匹配该正则表达式。参数为字符串；返回值为布尔值。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    var reg1 = /\d/, reg2 = /\d/g;
    reg1.test(&#39;a12ab&#39;);
    // true

    reg2.test(&#39;a12ab&#39;);
    // true

    reg2.test(&#39;a12ab&#39;);
    // true

    reg2.test(&#39;a12ab&#39;); //注意这里变成`false`了就是因为每执行一次，`lastIndex`属性变了一次导致的。所以用`test`方法的RegExp不要用全局匹配模式。
    // false

    reg2.test(&#39;a12ab&#39;);
    // true

    reg2.test(&#39;a12ab&#39;);
    // true

    while(reg2.test(&#39;a12ab&#39;)){
        console.log(&#39;reg2.lastIndex:&#39; +reg2.lastIndex);
    }
    //  reg2.lastIndex:2
    //  reg2.lastIndex:3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;14.2.&lt;code&gt;RegExp.exec(string)&lt;/code&gt;: 返回匹配信息的数组。&lt;/p&gt;

&lt;p&gt;如果没有匹配的文本，则返回&lt;code&gt;null&lt;/code&gt;，否则返回一个结果数组。非全局匹配模式，&lt;code&gt;lastIndex&lt;/code&gt;为0，不会变。全局模式下，每次执行，&lt;code&gt;lastIndex&lt;/code&gt;都会跟着改变。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var reg1 = /\d+(\w)\d/, reg2 = /\d+(\w)\d/g, str=&amp;quot;1a2ce58g79ht&amp;quot;;
var result = reg1.exec(str);
console.log(reg1.lastIndex + &#39;\t&#39; + result.index+ &#39;\t&#39; + result.toString());
&amp;gt;&amp;gt;&amp;gt; 0   0   1a2,a
while(result=reg2.exec(str)){
    console.log(&#39;reg2.lastIndex:&#39;+ reg2.lastIndex + &#39;\t&#39; + &#39;result.index:&#39;+ result.index+ &#39;\t&#39; + result.toString());    
}
&amp;gt;&amp;gt;&amp;gt;reg2.lastIndex:3 result.index:0  1a2,a
&amp;gt;&amp;gt;&amp;gt;reg2.lastIndex:9 result.index:5  58g7,g
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;15-string-的一些正则操作-查找-替换-切分等-方法-match-search-replace-split&#34;&gt;15. String 的一些正则操作(查找、替换、切分等)方法：match()、search()、replace()、split();&lt;/h2&gt;

&lt;p&gt;15.1. &lt;code&gt;string.match(RegExp)&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;1)非全局模式下，返回第一个匹配结果及其&lt;code&gt;index&lt;/code&gt;以及原字符串的引用(见示例代码)；&lt;/p&gt;

&lt;p&gt;2)全局模式下，返回所有匹配结果为元素的数组；&lt;/p&gt;

&lt;p&gt;3)匹配失败则返回&lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    var reg1 = /\d{4}-\d{2}-\d{2}/;
    var reg2 = /\d{4}-\d{2}-\d{2}/g;
    var str = &amp;quot;2016-10-01 2017-10-01 20181001&amp;quot;;
    var matchArray1 = str.match(reg1);
    var matchArray2 = str.match(reg2);
    console.log(matchArray1);
    // [&amp;quot;2016-10-01&amp;quot;, index: 0, input: &amp;quot;2016-10-01 2017-10-01 20181001&amp;quot;]

    console.log(matchArray2);
    // [&amp;quot;2016-10-01&amp;quot;, &amp;quot;2017-10-01&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;15.2.&lt;code&gt;string.search(RegExp)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;参数可以是&lt;code&gt;子字符串&lt;/code&gt;也可以是&lt;code&gt;正则表达式&lt;/code&gt;。这个方法用来寻找某个子字符串或者正则表达式在该字符串中第一次匹配成功的位置，如果不成功，则返回&lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;15.3.&lt;code&gt;string.replace(RegExp, replacement)&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;1)这个方法用来进行正则表达式替换，将&lt;code&gt;RegExp&lt;/code&gt;能匹配的文本替换成第二个参数&lt;code&gt;replacement&lt;/code&gt;。默认只进行一次匹配。如果设定为全局模式，则所有能匹配的文本都会替换。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    &amp;quot;2016-10-01 2017-10-01 20181001&amp;quot;.replace(/\d{4}-\d{2}-\d{2}/, &amp;quot;Date&amp;quot;);
    // &amp;quot;Date 2017-10-01 20181001&amp;quot;

    &amp;quot;2016-10-01 2017-10-01 20181001&amp;quot;.replace(/\d{4}-\d{2}-\d{2}/g, &amp;quot;Date&amp;quot;);
    // &amp;quot;Date Date 20181001&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2)如果第二个参数字符串中引用分组，可以使用&lt;code&gt;$1&lt;/code&gt;表示第一个分组，&lt;code&gt;$2&lt;/code&gt;表示第二个分组，以此类推。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    &amp;quot;2016-10-01 2017-10-01 20181001&amp;quot;.replace(/(\d{4})-(\d{2})-(\d{2})/, &amp;quot;$2/$3/$1&amp;quot;);
    // &amp;quot;10/01/2016 2017-10-01 20181001&amp;quot;

    &amp;quot;2016-10-01 2017-10-01 20181001&amp;quot;.replace(/(\d{4})-(\d{2})-(\d{2})/g, &amp;quot;$2/$3/$1&amp;quot;);
    // &amp;quot;10/01/2016 10/01/2017 20181001&amp;quot;

    &amp;quot;2016-10-01 2017-10-01 20181001&amp;quot;.replace(/(\d{4})-?(\d{2})-?(\d{2})/g, &amp;quot;$2/$3/$1&amp;quot;);
    // &amp;quot;10/01/2016 10/01/2017 10/01/2018&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3)如果要在第二个参数中表示&lt;code&gt;$&lt;/code&gt;字符，则必须使用&lt;code&gt;$$&lt;/code&gt;转义。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    &amp;quot;the price is 12.99&amp;quot;.replace(/([\d+\.\d{0,2}|\d+])/, &amp;quot;$$$1&amp;quot;);
    // &amp;quot;the price is $12.99&amp;quot;

    &amp;quot;the price is 12&amp;quot;.replace(/([\d+\.\d{0,2}|\d+])/, &amp;quot;$$$1&amp;quot;);
    &amp;quot;the price is $12&amp;quot;

    &amp;quot;the price is 12.99&amp;quot;.replace(/(\d+\.\d{0,2})/, &amp;quot;￥$1&amp;quot;);
    // &amp;quot;the price is ￥12.99&amp;quot;

    &amp;quot;the price is 12&amp;quot;.replace(/([\d+\.\d{0,2}|\d+])/, &amp;quot;$&amp;quot;);
    &amp;quot;the price is $12&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4)第二个参数还可以是函数。&lt;/p&gt;

&lt;p&gt;下面的例子展示了如何将t开头的单词转换为大写。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    &amp;quot;one two three&amp;quot;.replace(/\bt[a-zA-Z]+\b/g, function(m){
        return m.toUpperCase();
    });
    // &amp;quot;one TWO THREE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;15.4. &lt;code&gt;string.split(RegExp)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;这个方法使用一个正则表达式切分字符串，正则表达式是否使用了全局模式对结果没有影响。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    &amp;quot;one two three&amp;quot;.split(/s+/);
    // [&amp;quot;one two three&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>