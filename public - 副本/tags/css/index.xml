<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Css on Frank Wang&#39;s Coding World</title>
    <link>http://www.wangxingfeng.com/tags/css/index.xml</link>
    <description>Recent content in Css on Frank Wang&#39;s Coding World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="http://www.wangxingfeng.com/tags/css/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>用border-image&#43;SVG实现切角效果</title>
      <link>http://www.wangxingfeng.com/bevel-corners-svg.html</link>
      <pubDate>Sat, 06 May 2017 16:19:48 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/bevel-corners-svg.html</guid>
      <description>

&lt;p&gt;之前写了一篇文章，介绍了&lt;a href=&#34;http://www.wangxingfeng.com/bevel-corners.html&#34;&gt;基于CSS渐变来实现切角效果&lt;/a&gt;的方法。今天再来介绍另一种方法，即使用&lt;code&gt;border-image&lt;/code&gt;+&lt;code&gt;SVG&lt;/code&gt;的方式来实现&lt;code&gt;切角效果&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;border-image的工作原理&#34;&gt;border-image的工作原理&lt;/h2&gt;

&lt;p&gt;给一个元素设置边框，我们会使用&lt;code&gt;border&lt;/code&gt;这个属性。&lt;code&gt;border&lt;/code&gt;是&lt;code&gt;border-width&lt;/code&gt;、&lt;code&gt;border-style&lt;/code&gt;、&lt;code&gt;border-color&lt;/code&gt;等3个属性的简写形式。&lt;/p&gt;

&lt;p&gt;我们给div设置一个宽20px、实线、颜色为&lt;code&gt;#58a&lt;/code&gt;的边框。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    div{
        width:200px;
        height:150px; 
        margin:20px auto;
        border:40px solid #58a;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:200px; height:150px; margin:20px auto; border:40px solid #58a;&#34;&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;border-image&lt;/code&gt;是CSS3的新属性，用于指定元素边框的背景图片。使用 border-image 时，border-style属性所设置的边框样式solid、dashed或dotted将不起作用。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;border-image&lt;/code&gt;属性也是一个简写：包含&lt;code&gt;border-image-source&lt;/code&gt;、&lt;code&gt;border-image-slice&lt;/code&gt;、&lt;code&gt;border-image-width&lt;/code&gt;、&lt;code&gt;border-image-outset&lt;/code&gt;、&lt;code&gt;border-image-repeat&lt;/code&gt;等5个属性。&lt;/p&gt;

&lt;h3 id=&#34;1-border-image-source&#34;&gt;1. &lt;code&gt;border-image-source&lt;/code&gt;:&lt;/h3&gt;

&lt;p&gt;从这个属性的英文命名，我们就可以知道它表示的是边框背景图片资源的路径，默认值是&lt;code&gt;none&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    div{
        width:200px;
        height:150px;
        margin:20px auto;
        border:40px solid #58a;
        border-image-source:url(/images/adamcatlace.jpg);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:200px; height:150px; margin:20px auto; border:40px solid #58a; border-image-source:url(/images/adamcatlace.jpg)&#34;&gt;&lt;/div&gt;

&lt;h3 id=&#34;2-border-image-slice&#34;&gt;2. &lt;code&gt;border-image-slice&lt;/code&gt;:&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;border-image-slice&lt;/code&gt;属性指定图像的边界向内偏移。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    div{
        width:200px;
        height:150px;
        margin:20px auto;
        border:40px solid #58a;
        border-image-source:url(/images/adamcatlace.jpg);
        border-image-slice:10% 20% 30% 40%; 
        border-image-repeat: none;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:200px; height:150px; margin:20px auto; border:40px solid #58a; border-image:url(/images/adamcatlace.jpg);border-image-slice:10% 20% 30% 40%; border-image-repeat: round stretch;&#34;&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    div{
        width:200px;
        height:150px;
        margin:20px auto;
        border:40px solid #58a;
        border-image-source:url(/images/adamcatlace.jpg);
        border-image-slice: 10% 30%;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:200px; height:150px; margin:20px auto; border:40px solid #58a; border-image:url(/images/adamcatlace.jpg); border-image-slice: 10% 30%;&#34;&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    div{
        width:200px;
        height:150px;
        margin:20px auto;
        border:40px solid #58a;
        border-image-source:url(/images/adamcatlace.jpg);
        border-image-slice: 30 30% 45;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:200px; height:150px; margin:20px auto; border:40px solid #58a; border-image:url(/images/adamcatlace.jpg); border-image-slice: 30 30% 45;&#34;&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    div{
        width:200px;
        height:150px;
        margin:20px auto;
        border:40px solid #58a;
        border-image-source:url(/images/adamcatlace.jpg);
        border-image-slice: 7 12 14 5; 
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:200px; height:150px; margin:20px auto; border:40px solid #58a; border-image:url(/images/adamcatlace.jpg); border-image-slice: 7 12 14 5; &#34;&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    div{
        width:200px;
        height:150px;
        margin:20px auto;
        border:40px solid #58a;
        border-image-source:url(/images/adamcatlace.jpg);
        border-image-slice: 10% fill 7 12; 
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:200px; height:150px; margin:20px auto; border:40px solid #58a; border-image:url(/images/adamcatlace.jpg); border-image-slice: border-image-slice: 10% fill 7 12; &#34;&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    .demo{
        border:30px solid transparent;
        border-image:1 url(&#39;data:image/svg+xml,\
            &amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;3&amp;quot; height=&amp;quot;3&amp;quot; fill=&amp;quot;red&amp;quot;&amp;gt;\
              &amp;lt;polygon points=&amp;quot;0,1 1,0 2, 0 3, 1 3, 2 2, 3 1, 3 0, 2&amp;quot;/&amp;gt;\
            &amp;lt;/svg&amp;gt;&#39;);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;300&#34; height=&#34;300&#34; fill=&#34;purple&#34;&gt;
    &lt;polygon points=&#34;0, 100 100, 0 200, 0 300, 100 300, 200 200, 300 100, 300 0, 200&#34;/&gt;
&lt;/svg&gt;
&lt;div class=&#34;demo bevel-corners-8&#34;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;div&gt;
    
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>CSS实现切角效果</title>
      <link>http://www.wangxingfeng.com/bevel-corners.html</link>
      <pubDate>Tue, 02 May 2017 22:52:17 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/bevel-corners.html</guid>
      <description>

&lt;p&gt;扁平化设计风格中，很流行斜面切角，即把元素的一个或多个角切成45度的缺口。大多数网页开发者倾向于使用背景图片来实现切角效果。但使用背景图片会增加额外的HTTP请求，增加网页加载的时间，难以修改和维护。实际上，CSS已经足够强大，可以提供纯CSS的解决方案，我们仅用CSS代码就能实现切角效果。&lt;/p&gt;

&lt;h2 id=&#34;基于-css渐变-的切角效果&#34;&gt;基于&lt;code&gt;CSS渐变&lt;/code&gt;的切角效果&lt;/h2&gt;

&lt;p&gt;如果你对CSS渐变不陌生的话，应该知道CSS渐变可以接受&lt;code&gt;一个角度&lt;/code&gt;作为方向，还可以设置百分比的色标的位置。当然，色标的位置也可以设置为绝对的长度值。
&lt;style&gt;
    .demo{
        width:300px;
        height: 200px;
        margin:10px auto;
    }
    .demo1{
        background: linear-gradient(-45deg, red, green);
    }
    .demo2{
        background: linear-gradient(-45deg, red 20%, green 70%);
    }
    .demo3{
        background: linear-gradient(-45deg, red 20%, green 0);
    }
    .demo4{
        background: linear-gradient(-45deg, transparent 20%, green 0);
    }
    .demo5{
        background: linear-gradient(-45deg, transparent 30px, green 0),
                    linear-gradient(45deg, transparent 30px, red 0);
    }
    .demo6{
        background: linear-gradient(-45deg, transparent 30px, green 0) right,
                    linear-gradient(45deg, transparent 30px, red 0) left;
        background-size:50% 100%;
        background-repeat:no-repeat;
    }
    .demo7{
        background: linear-gradient(135deg, transparent 30px, green 0) top left,
            linear-gradient(-135deg, transparent 30px, red 0) top right,
            linear-gradient(-45deg, transparent 30px, pink 0) bottom right,
            linear-gradient(45deg, transparent 30px, blue 0) bottom left;
        background-size: 50% 50%;
        background-repeat: no-repeat;
    }
&lt;/style&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-普通的线性渐变&#34;&gt;1.普通的线性渐变&lt;/h3&gt;

&lt;p&gt;我们设置-45度为渐变方向，即从右下角到左上角渐变的方向。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.demo{
    background: linear-gradient(-45deg, red, green);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;渲染的效果是这样的：&lt;/p&gt;

&lt;div class=&#34;demo demo1&#34;&gt;&lt;/div&gt;

&lt;h3 id=&#34;2-设置色标值的线性渐变&#34;&gt;2.设置色标值的线性渐变&lt;/h3&gt;

&lt;p&gt;我们给这两个色标设置一个百分比，看看会是什么效果。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.demo{
    background: linear-gradient(-45deg, red 20%, green 70%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上述代码的意思从右下角到左上角渐变的方向上，0~20%的区域是纯红色的，20%-70%的区域是渐变，70%-100%的区域是纯绿色的。
&lt;div class=&#34;demo demo2&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-色标值为0的线性渐变&#34;&gt;3.色标值为0的线性渐变&lt;/h3&gt;

&lt;p&gt;如果我们再稍微做些修改，把第二个色标值改为0，会是什么效果呢？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.demo{
    background: linear-gradient(-45deg, red 20%, green 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;demo demo3&#34;&gt;&lt;/div&gt;

&lt;p&gt;是不是有点惊讶？！&lt;/p&gt;

&lt;p&gt;我们得到的图形是没有渐变的。从右下角到左上角渐变的方向上，0-20%的区域是纯红色，20%-100%的区域就是纯绿色。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;注意：只要第二个色标值小于前一个色标值，那么浏览器就会默认解析为前一个色标值的。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的CSS代码等价于：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.demo{
    background: linear-gradient(-45deg, red 20%, green 20%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-切角效果&#34;&gt;4.切角效果&lt;/h3&gt;

&lt;p&gt;将上面的代码再稍作改动，把右下角的&lt;code&gt;红色&lt;/code&gt;改成&lt;code&gt;透明色&lt;/code&gt;, 就能得到一个右下角的&lt;code&gt;切角效果&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.demo{
    background: linear-gradient(-45deg, transparent 20%, green 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;demo demo4&#34;&gt;&lt;/div&gt;

&lt;p&gt;其实，实际的网页开发中，我们更倾向于一个固定大小的切角。那么，我们可以把百分比改为绝对的长度值，比如把20%改为30px.&lt;/p&gt;

&lt;h3 id=&#34;5-两个切角效果&#34;&gt;5.两个切角效果&lt;/h3&gt;

&lt;p&gt;如果我们需要的切角不止一个，怎么实现呢？&lt;/p&gt;

&lt;p&gt;是不是可以声明两条渐变规则呢？我们来试一下效果。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.demo{
    background: linear-gradient(-45deg, transparent 30px, green 0),
                linear-gradient(45deg, transparent 30px, red 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;demo demo5&#34;&gt;&lt;/div&gt;

&lt;p&gt;尝试失败。因为默认情况下，两层渐变都会填满整个元素，导致相互重叠。这个时候，我们就需要用到&lt;code&gt;background-size&lt;/code&gt;和&lt;code&gt;background-repeat&lt;/code&gt;,让每层渐变分别占据整个元素的一半。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.demo{
    background: linear-gradient(-45deg, transparent 30px, green 0) right,
                linear-gradient(45deg, transparent 30px, red 0) left;
    background-size:50% 100%;
    background-repeat:no-repeat;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;demo demo6&#34;&gt;&lt;/div&gt;

&lt;h3 id=&#34;6-四个切角效果&#34;&gt;6.四个切角效果&lt;/h3&gt;

&lt;p&gt;看了两个切角的实现方式，想必你也能推断出实现&lt;code&gt;四个切角效果&lt;/code&gt;的思路了。我们需要&lt;code&gt;4层渐变&lt;/code&gt;，每层只占整个元素的&lt;code&gt;4分之一&lt;/code&gt;。下面的例子，我用了4种不同的颜色表示，这样可以更加直观的看出来每层渐变的大小和位置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.demo{
    background: linear-gradient(135deg, transparent 30px, green 0) top left,
        linear-gradient(-135deg, transparent 30px, red 0) top right,
        linear-gradient(-45deg, transparent 30px, pink 0) bottom right,
        linear-gradient(45deg, transparent 30px, blue 0) bottom left;
    background-size: 50% 50%;
    background-repeat: no-repeat;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;demo demo7&#34;&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>如何用CSS代码实现网页设计中的菱形图片</title>
      <link>http://www.wangxingfeng.com/diamond-picture.html</link>
      <pubDate>Mon, 01 May 2017 22:00:03 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/diamond-picture.html</guid>
      <description>

&lt;style&gt;
div.diamond-pic{width:200px;transform: rotate(45deg);overflow: hidden;margin:60px auto;}
img.diamond-img{max-width:100%;transform: rotate(-45deg);}
img.diamon-pic-clip-path{clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);}
img.diamon-pic-clip-path-2{clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);transition: 1s clip-path;}
img.diamon-pic-clip-path-2:hover{clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);}
&lt;/style&gt;

&lt;p&gt;在网页设计中，我们常常能够看到被裁切成菱形的图片。&lt;/p&gt;

&lt;p&gt;传统的实现方式是预先在图像处理软件中把图片裁切好，当然这种方式的可维护性差。&lt;/p&gt;

&lt;p&gt;而现在，随着CSS的新特性的支持度越来越好了，CSS也越来越强大，我们已经可以用CSS代码来实现菱形图片了。&lt;/p&gt;

&lt;h2 id=&#34;1-基于tranform的实现方法&#34;&gt;1. 基于tranform的实现方法&lt;/h2&gt;

&lt;p&gt;原图
&lt;img src=&#34;http://www.wangxingfeng.com/images/adamcatlace.jpg&#34; style=&#34;display:block; max-width: 200px; margin:30px auto&#34;&gt;
用一个&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 把图片包裹起来，对这个容器&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;应用&lt;code&gt;transform:rotate(45deg)&lt;/code&gt;, 进行旋转45度，我们得到如下的效果：图片应该也会跟着旋转了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div{
    width:200px;
    transform: rotate(45deg);
    overflow: hidden;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;diamond-pic&#34;&gt;
    &lt;img src=&#34;http://www.wangxingfeng.com/images/adamcatlace.jpg&#34; &gt;
&lt;/div&gt;

&lt;p&gt;如果我们对里面的图片进行反向旋转45度，那么图片的旋转就会抵消掉。看看效果。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    div&amp;gt;img{
        max-width:100%;
        transform: rotate(-45deg);
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;diamond-pic&#34; &gt;
    &lt;img src=&#34;http://www.wangxingfeng.com/images/adamcatlace.jpg&#34; class=&#34;diamond-img&#34; &gt;
&lt;/div&gt;

&lt;p&gt;我们得到了一个裁成&lt;code&gt;八边形&lt;/code&gt;的图片。&lt;/p&gt;

&lt;p&gt;问题出在哪里呢？我给外面的&lt;code&gt;div&lt;/code&gt;加一个边框，这样就容易看出来了。&lt;/p&gt;

&lt;div class=&#34;diamond-pic&#34; style=&#34;border:1px solid red;&#34;&gt;
    &lt;img src=&#34;http://www.wangxingfeng.com/images/adamcatlace.jpg&#34; class=&#34;diamond-img&#34;&gt;
&lt;/div&gt;

&lt;p&gt;问题出在了这里图片的宽度是与容器&lt;code&gt;div&lt;/code&gt;的&lt;code&gt;边长&lt;/code&gt;相等，其实我们应该让图片的宽度与&lt;code&gt;对角线&lt;/code&gt;相等。&lt;/p&gt;

&lt;p&gt;运用勾股定理，可以计算出图片的宽度应该是√2倍，我们取1.42倍。&lt;/p&gt;

&lt;p&gt;如果通过&lt;code&gt;width属性&lt;/code&gt;设置来放大图片,会得到如下的效果。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    div&amp;gt;img{
        width:142%;
        max-width:142%;
        transform: rotate(-45deg);
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;diamond-pic&#34;&gt;
    &lt;img src=&#34;http://www.wangxingfeng.com/images/adamcatlace.jpg&#34; class=&#34;diamond-img&#34; style=&#34;width:142%;max-width:142%;&#34;&gt;
&lt;/div&gt;

&lt;p&gt;因为是以图片的&lt;code&gt;左上角&lt;/code&gt;为原点进行放大的。我们还需要在通过设置&lt;code&gt;margin:-45px;&lt;/code&gt;才能得到菱形图片。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    div&amp;gt;img{
        max-width:142%;
        transform: rotate(-45deg);
        margin:-45px;
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;diamond-pic&#34;&gt;
    &lt;img src=&#34;http://www.wangxingfeng.com/images/adamcatlace.jpg&#34; class=&#34;diamond-img&#34; style=&#34;width:142%;max-width:142%;margin:-45px&#34;&gt;
&lt;/div&gt;

&lt;p&gt;当然，我们可以通过&lt;code&gt;transform:scale(1.42)&lt;/code&gt;来放大图片1.42倍。&lt;code&gt;scale()&lt;/code&gt;是以图片的&lt;code&gt;中心点&lt;/code&gt;进行缩放的，这样我们就不用额外地设置&lt;code&gt;margin&lt;/code&gt;值了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;div&amp;gt;img{
    max-width:100%;
    transform: scale(1.42) rotate(-45deg);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;diamond-pic&#34;&gt;
    &lt;img src=&#34;http://www.wangxingfeng.com/images/adamcatlace.jpg&#34; class=&#34;diamond-img&#34; style=&#34;transform: rotate(-45deg) scale(1.42);&#34;&gt;
&lt;/div&gt;

&lt;h2 id=&#34;2-基于裁切路径-clip-path-方法&#34;&gt;2. 基于裁切路径 clip-path 方法&lt;/h2&gt;

&lt;p&gt;第一种方法虽然可以奏效，但存在一些缺点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.需要一层额外的HTML标签；&lt;/li&gt;
&lt;li&gt;2.代码不够直观；&lt;/li&gt;
&lt;li&gt;3.如果处理的图片不是正方形，将无法得到一个菱形图片，如下图所示：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;diamond-pic&#34;&gt;
    &lt;img src=&#34;http://www.wangxingfeng.com/images/adam-sleeping.jpg&#34; class=&#34;diamond-img&#34; style=&#34;transform: rotate(-45deg) scale(1.42);&#34;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;SVG&lt;/code&gt;中，有个名叫&lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt;的元素，专门用来定义剪裁路径。其实CSS中也有一个类似的属性，即&lt;code&gt;clip-path属性&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;clip-path&lt;/code&gt;可以把元素裁切成我们想要的任何形状。我们通过&lt;code&gt;polygon()函数&lt;/code&gt;来指定一个菱形，参数是一系列用&lt;code&gt;逗号&lt;/code&gt;分隔的&lt;code&gt;坐标点&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img{
    clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.wangxingfeng.com/images/adam-sleeping.jpg&#34; class=&#34;diamon-pic-clip-path&#34; &gt;&lt;/p&gt;

&lt;p&gt;如上图所示，这个方法可以很好的适应非正方形的图片。&lt;/p&gt;

&lt;p&gt;另外，因为&lt;code&gt;clip-path&lt;/code&gt;属性可以参与动画，我们还可以给这个图片动画过渡效果。比如，当我们的鼠标悬停到图片上时，菱形图片平滑地扩展为完整的原图。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img{
    clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);
    transition: 1s clip-path;
}
img:hover{
    clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.wangxingfeng.com/images/adam-sleeping.jpg&#34; class=&#34;diamon-pic-clip-path-2&#34; &gt;&lt;/p&gt;

&lt;p&gt;注意，除了谷歌浏览器，其他浏览器对这个clip-path属性的支持度都还不是很好。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用CSS创建内容不倾斜的平行四边形</title>
      <link>http://www.wangxingfeng.com/parallelograms.html</link>
      <pubDate>Sun, 30 Apr 2017 16:44:06 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/parallelograms.html</guid>
      <description>

&lt;h2 id=&#34;1-平行四边形&#34;&gt;1.平行四边形&lt;/h2&gt;

&lt;p&gt;普通的网页元素是矩形的。但有时候，我们需要创建可以传达出一种动感的形状，比如平行四边形。&lt;/p&gt;

&lt;p&gt;说到&lt;code&gt;倾斜&lt;/code&gt;，我们会想到使用&lt;code&gt;transform&lt;/code&gt;属性的&lt;code&gt;skew()&lt;/code&gt;方法来对普通的矩形元素进行&lt;code&gt;斜向拉伸&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;width:100px;
height:60px;
transform: skew(-30deg);
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:100px;height:60px;margin:10px auto;color:#fff;background: #673ab7;font-size: 16px;line-height: 60px;text-align: center;transform: skew(-30deg);&#34;&gt;平行四边形&lt;/div&gt;

&lt;p&gt;如上所示，我们得到了一个平行四边形，但是内容也跟着斜向变形了。我们希望只是容器倾斜，而内容是不倾斜的。怎么办？&lt;/p&gt;

&lt;h2 id=&#34;2-嵌套元素方案&#34;&gt;2.嵌套元素方案&lt;/h2&gt;

&lt;p&gt;首先，我们可以先在容器内部新增一个元素，包裹里面的内容，对这个元素再次进行斜向变形，值为负的外面容器的斜向变形值，这样刚好可以抵消掉斜向变形。&lt;/p&gt;

&lt;p&gt;HTML代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;parallelograms-container&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;parallelograms-inner&amp;quot;&amp;gt;
        平行四边形
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSS代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.parallelograms-container{
    width:100px;
    height:60px;
    transform: skew(-30deg);
}

.parallelograms-inner{
    transform:skew(30deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;parallelograms-container&#34;&gt;
    &lt;div class=&#34;parallelograms-inner&#34;&gt;
        平行四边形
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;3-伪元素方案&#34;&gt;3.伪元素方案&lt;/h2&gt;

&lt;p&gt;如果我们不想添加额外的HTML结构，能否用纯CSS来实现呢？&lt;/p&gt;

&lt;p&gt;答案是肯定的。&lt;/p&gt;

&lt;p&gt;我们可以考虑用CSS生成&lt;code&gt;伪元素&lt;/code&gt;，然后把所有样式（背景、边框等）应用到伪元素上，用&lt;code&gt;绝对定位&lt;/code&gt;将伪元素重叠在内容之下，然后再对伪元素进行&lt;code&gt;斜向拉伸&lt;/code&gt;变形。这样内容就可以保持不倾斜。&lt;/p&gt;

&lt;p&gt;HTML 代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;pseudo-container&amp;quot;&amp;gt;
    平行四边形
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSS 代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.pseudo-container{
    position:relative;
    /* 内容的文字大小、颜色、内边距等样式在这里*/
    width:100px;
    height:60px;
    margin:0 auto;
    color:#fff;
    font-size: 16px;
    line-height: 60px;
    text-align: center;
    background:transparent;
}

.pseudo-container::before{
    content:&amp;quot;&amp;quot;;
    position:absolute;
    top:0;right:0;bottom:0;left:0;
    z-index:-1;
    background: #673ab7;
    transform: skew(-30deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果如下：
&lt;div class=&#34;pseudo-container&#34;&gt;
    平行四边形
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;注意这里有个小坑。由于我们对这个伪元素设置了&lt;code&gt;z-index:-1&lt;/code&gt;, 所以，必须确保这个伪元素的容器、以及容器的&lt;code&gt;祖先元素&lt;/code&gt;(一直追溯到&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;的&lt;code&gt;直接子元素&lt;/code&gt;)的背景都必须是透明的，否则将会遮盖住这个&lt;code&gt;伪元素&lt;/code&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用CSS绘制椭圆、半椭圆、四分之一椭圆</title>
      <link>http://www.wangxingfeng.com/ellipse-border-radius.html</link>
      <pubDate>Sun, 30 Apr 2017 11:25:58 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/ellipse-border-radius.html</guid>
      <description>

&lt;h2 id=&#34;1-border-radius&#34;&gt;1. border-radius&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;border-radius&lt;/code&gt; 可以为元素添加圆角边框，比如 按钮。&lt;/p&gt;

&lt;p&gt;&lt;button style=&#34;display:block; width:160px; height:60px; margin:10px auto;color:#fff;background: #ff5722; border-radius:8px; border:none;outline:none; &#34;&gt;
    示例按钮
&lt;/button&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-兼容性-ie9-以上都很好地能够兼容-border-radius&#34;&gt;2. 兼容性： IE9+以上都很好地能够兼容  border-radius&lt;/h2&gt;

&lt;h2 id=&#34;3-border-radius-绘制圆形&#34;&gt;3. border-radius 绘制圆形&lt;/h2&gt;

&lt;p&gt;如果我们给一个正方形的元素设置一个足够大的border-radius值（只要大于等于正方形边长的一半）的话，就可以被这个元素变成圆形。
但考虑到元素的高宽可能不是固定的，那么，我们可以设置百分比，这个百分比是基于元素的尺寸大小来解析的。当我们给一个正方形的元素设置border-radius：50%时，我们会得到一个自适应的圆形。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    width:200px;
    height:200px;
    border-radius:50%; /*在这里等价于border-radius:100px; 建议写成百分比*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如下所示：&lt;/p&gt;

&lt;div style=&#34;width:200px; height:200px; border-radius: 50%; background: #03a9f4; margin: 10px auto&#34;&gt;&lt;/div&gt;

&lt;h2 id=&#34;4-border-radius-绘制自适应椭圆&#34;&gt;4. border-radius 绘制自适应椭圆&lt;/h2&gt;

&lt;p&gt;当元素的高宽不相等时，我们来看下会变成什么样子。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    width:300px; /*宽度变长了*/
    height:200px;
    border-radius:50%; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如下所示：&lt;/p&gt;

&lt;div style=&#34;width:300px; height:200px; border-radius: 50%; background: #cddc39; margin: 10px auto&#34;&gt;&lt;/div&gt;

&lt;p&gt;如上图所示，当元素的高宽不相等，&lt;code&gt;border-radius&lt;/code&gt; 设置为 50%，我们将会得到一个自适应的椭圆。&lt;/p&gt;

&lt;h2 id=&#34;5-border-radius-绘制半个椭圆&#34;&gt;5. border-radius 绘制半个椭圆&lt;/h2&gt;

&lt;p&gt;如果想要得到半个椭圆，怎么办呢？&lt;/p&gt;

&lt;div style=&#34;width:300px; height:100px; border-radius: 50% / 100% 100% 0 0; background: #795548; margin: 10px auto&#34;&gt;&lt;/div&gt;

&lt;p&gt;我们需要补充以下两个知识点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.&lt;code&gt;border-radius&lt;/code&gt;的值是可以单独指定水平方向上的半径和垂直方向上的半径的，中间需要用一个斜杠(/)分隔开两个值。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2.&lt;code&gt;border-radius&lt;/code&gt;是一个简写属性，我们可以单独为元素的每个角指定不同的值。&lt;code&gt;border-radius&lt;/code&gt; 展开的话是以下4个属性：&lt;/p&gt;

&lt;p&gt;border-top-left-radius
border-top-right-radius
border-bottom-right-radius
border-bottom-left-radius&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们不必分开写，可以给&lt;code&gt;border-radius&lt;/code&gt;指定4个值，用空格分开。浏览器解析的时候，是按顺时针顺序应用到元素的四个角的（和&lt;code&gt;margin&lt;/code&gt;、&lt;code&gt;padding&lt;/code&gt;等其他的常见属性的简写类似）。&lt;/p&gt;

&lt;p&gt;我们来分析一下这个半椭圆形。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.它是垂直对称的，说明左上角和右上角的半径值是相同的；左下角和右下角的半径值也应该是相同的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2.它的顶部边缘是曲线的，说明左上角和右上角的半径值之和应该是等于这个元素的宽的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;3.由前面两点可以推出，左上角和右上角的半径在水平方向上是50%。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;4.再看垂直方向上，顶部的两个圆角占据了整个元素的高度，而底部完全没有任何圆角。因此，可以推断左上角和右上角的半径在垂直方向上是100%，左下角和右下角在垂直方向上是0。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;综上所述，&lt;code&gt;border-radius&lt;/code&gt;的值应该是&lt;code&gt;50% / 100% 100% 0 0&lt;/code&gt;;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    width:300px;
    height:100px;
    border-radius: 50% / 100% 100% 0 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:300px; height:100px; border-radius: 50% / 100% 100% 0 0; background: #795548; margin: 10px auto&#34;&gt;&lt;/div&gt;

&lt;p&gt;如果我们把垂直方向上的值改为&lt;code&gt;0 0 100% 100%&lt;/code&gt;，则可以得到另一个半椭圆。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    width:300px;
    height:100px;
    border-radius: 50% /0 0 100% 100% ;
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:300px; height:100px; border-radius: 50% / 0 0 100% 100%; background: #4caf50; margin: 10px auto&#34;&gt;&lt;/div&gt;

&lt;p&gt;如果把&lt;code&gt;水平方向&lt;/code&gt;&lt;code&gt;border-raduis&lt;/code&gt;设置为&lt;code&gt;50%&lt;/code&gt;; &lt;code&gt;垂直方向&lt;/code&gt;上，左上角和左下角设置为&lt;code&gt;100%&lt;/code&gt;； 右上角和右下角设为&lt;code&gt;0&lt;/code&gt;，则可以得到一个&lt;code&gt;沿Y轴劈开的半椭圆形&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    width:150px;
    height:200px;
    border-radius: 100% 0 0 100% / 50%;
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:150px; height:200px; border-radius: 100% 0 0 100% / 50% ; background: #9c27b0; margin: 10px auto&#34;&gt;&lt;/div&gt;

&lt;h2 id=&#34;6-border-radius-绘制椭圆的四分之一&#34;&gt;6.border-radius 绘制椭圆的四分之一&lt;/h2&gt;

&lt;p&gt;如果想要得到四分之一个椭圆呢？顺着之前的思路，我们可以设置其中一个角的&lt;code&gt;border-radius&lt;/code&gt;值为&lt;code&gt;100%&lt;/code&gt;，其他三个角为&lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    width:150px;
    height:100px;
    border-radius: 100% 0 0 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;width:150px; height:100px; border-radius: 100% 0 0 0 ; background: #9e9e9e; margin: 10px auto&#34;&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>用CSS实现图片翻转的动画效果</title>
      <link>http://www.wangxingfeng.com/css-flip.html</link>
      <pubDate>Sat, 29 Apr 2017 21:24:00 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/css-flip.html</guid>
      <description>

&lt;style&gt;

.back, .front, .rotate-container{
    width: 320px;
    height: 380px;
    margin: 0 auto;
    text-align: center;
    color: #00f;
}
.flipper {
    transition-duration: 1s;
    transform-style: preserve-3d;
    position: relative;
}
.rotate-container.hover .flipper,.rotate-container:hover .flipper {
    transform: rotateY(180deg)
}
.back, .front {
    backface-visibility: hidden;
    position: absolute;
    top: 0;
    left: 0;
}
.front {
    z-index: 2;
}
.back {
    transform: rotateY(180deg);
}
.rotateY{
    transition-duration:1.5s;
}
.rotateY45:hover{
    transform: rotateY(45deg);
}
.rotateY90:hover{
    transform: rotateY(90deg);
}
.rotateY180:hover{
    transform: rotateY(180deg);
    
}
.bf-hidden{
    transform-style: preserve-3d;
    backface-visibility: hidden;
}
&lt;/style&gt;

&lt;h2 id=&#34;用css实现页面或图片翻转的动画效果&#34;&gt;用CSS实现页面或图片翻转的动画效果&lt;/h2&gt;

&lt;p&gt;Web开发中常常会有动画的交互效果，以前我们只能用JavaScript来实现，随着浏览器对CSS3新特性的支持度越来越好，很多的特效都可以通过CSS代码来实现。&lt;/p&gt;

&lt;p&gt;我们在浏览网站的时候，经常能够看到图片会翻转的动画效果，比如&lt;code&gt;Demo 1&lt;/code&gt;所示。&lt;/p&gt;

&lt;div class=&#34;rotate-container&#34; style=&#34;border:2px solid #000;&#34;&gt;
    &lt;div class=&#34;flipper&#34;&gt;
        &lt;div class=&#34;front&#34;&gt;
            &lt;!-- 前面内容 --&gt;
            &lt;p &gt;正面内容&lt;/p&gt;
            &lt;img src=&#34;https://images-cn.ssl-images-amazon.com/images/I/51fD0ZgQoXL._SL400_.jpg&#34; alt=&#34;&#34;&gt;
        &lt;/div&gt;
        &lt;div class=&#34;back&#34;&gt;
            &lt;p&gt;反面内容&lt;/p&gt;
            &lt;img src=&#34;https://images-cn.ssl-images-amazon.com/images/G/28/kindle/merch/2014/campaign/Gen7-Launch/Associate/Associate_AssociateCenrter_300_250_Family._V325383366_.jpg&#34; alt=&#34;&#34;&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;能否用纯CSS来实现这种翻转动画效果呢？答案是肯定的。&lt;/p&gt;

&lt;p&gt;我们知道CSS3的&lt;code&gt;transform&lt;/code&gt;属性非常强大，可以实现2D或者3D的旋转、缩放、移动或倾斜。&lt;/p&gt;

&lt;p&gt;上述Demo1是沿着Y轴3D翻转的，我们可以想到用&lt;code&gt;transform&lt;/code&gt;属性的&lt;code&gt;rotateY()&lt;/code&gt;方法来实现。&lt;/p&gt;

&lt;h2 id=&#34;示例代码&#34;&gt;示例代码&lt;/h2&gt;

&lt;p&gt;HTML代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;rotate-container&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;flipper&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;front&amp;quot;&amp;gt;
            &amp;lt;!-- 前面内容 --&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;quot;back&amp;quot;&amp;gt;
            &amp;lt;!-- 背面内容 --&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSS代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.rotate-container:hover .flipper{
    transform: rotateY(180deg);
}

.rotate-container, .front, .back {
    width: 320px;
    height: 480px;
}

.flipper {
    transition-duration: 1s;  
    transform-style: preserve-3d;
    position: relative;
}

.front, .back {
    backface-visibility: hidden;
    position: absolute;
    top: 0;
    left: 0;
}

.front {
    z-index: 2;
}

.back {
    transform: rotateY(180deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;关键的技术点解释&#34;&gt;关键的技术点解释：&lt;/h2&gt;

&lt;h3 id=&#34;1-transform-变形&#34;&gt;1.transform：变形&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;transform: rotateY(180deg)&lt;/code&gt; 表示沿着Y轴旋转180度。&lt;/p&gt;

&lt;p&gt;&lt;p&gt;Demo2：沿着Y轴旋转180度(旋转到背面可见)&lt;/p&gt;
&lt;div class=&#34;rotateY rotateY180&#34;&gt;
    &lt;img src=&#34;https://images-cn.ssl-images-amazon.com/images/I/51fD0ZgQoXL._SL400_.jpg&#34; alt=&#34;&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Demo3：沿着Y轴旋转90度&lt;/p&gt;
&lt;div class=&#34;rotateY rotateY90&#34;&gt;
    &lt;img src=&#34;https://images-cn.ssl-images-amazon.com/images/I/51fD0ZgQoXL._SL400_.jpg&#34; alt=&#34;&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Demo4：沿着Y轴旋转45度&lt;/p&gt;
&lt;div class=&#34;rotateY rotateY45&#34;&gt;
    &lt;img src=&#34;https://images-cn.ssl-images-amazon.com/images/I/51fD0ZgQoXL._SL400_.jpg&#34; alt=&#34;&#34;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-transform-style-指定该元素的子元素所在空间&#34;&gt;2.transform-style：指定该元素的子元素所在空间。&lt;/h3&gt;

&lt;p&gt;指定该元素的子元素是（看起来）位于三维空间内，还是在该元素所在的平面内被扁平化。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;transform-style&lt;/code&gt;属性有两个参数，&lt;code&gt;flat&lt;/code&gt;和&lt;code&gt;preserve-3d&lt;/code&gt;。&lt;code&gt;flat&lt;/code&gt;为默认值，指定子元素位于此元素所在平面内; &lt;code&gt;preserve-3d&lt;/code&gt;指定子元素定位在三维空间内。&lt;/p&gt;

&lt;h3 id=&#34;3-backface-visibility-指定元素旋转到背面时是否可见&#34;&gt;3.backface-visibility 指定元素旋转到背面时是否可见。&lt;/h3&gt;

&lt;p&gt;默认为visible，即背面是可见的, 如&lt;code&gt;Demo2&lt;/code&gt;所示。&lt;/p&gt;

&lt;p&gt;在Demo1中，由于翻转过来的是另外一张图片，所以设置为backface-visibility:hidden背面是不可见的。&lt;/p&gt;

&lt;p&gt;&lt;p&gt;Demo5: 沿着Y轴旋转180度(旋转到背面不可见)&lt;/p&gt;
&lt;div class=&#34;rotate-container&#34;&gt;
    &lt;div class=&#34;flipper&#34; &gt;
        &lt;div class=&#34;front&#34;&gt;
            &lt;img src=&#34;https://images-cn.ssl-images-amazon.com/images/I/51fD0ZgQoXL._SL400_.jpg&#34; alt=&#34;&#34;&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-transition-duration-表示完成过渡效果需要花费的时间&#34;&gt;4.transition-duration：表示完成过渡效果需要花费的时间。&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;transition-duration：1s&lt;/code&gt;可以用简写的形式&lt;code&gt;transition:1s&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;5-position-absolute-绝对定位&#34;&gt;5.position:absolute：绝对定位。&lt;/h3&gt;

&lt;p&gt;使用绝对定位&lt;code&gt;position:absolute&lt;/code&gt;把翻转前后的两个元素摆放到同一个位置。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS预处理器之Less</title>
      <link>http://www.wangxingfeng.com/less.html</link>
      <pubDate>Sun, 23 Apr 2017 16:28:38 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/less.html</guid>
      <description>

&lt;h2 id=&#34;1-css&#34;&gt;1.CSS&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;CSS&lt;/code&gt;层叠样式表(Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。&lt;/p&gt;

&lt;p&gt;由于&lt;code&gt;CSS&lt;/code&gt;不想普通的编程语言有自己的变量、常量、条件语句、函数等编程语法，而只是一行行单纯的属性描述，所以写起来相当的费事，代码难以组织和维护。&lt;/p&gt;

&lt;h2 id=&#34;2-dry&#34;&gt;2.DRY&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;DRY&lt;/code&gt;, 即 Don&amp;rsquo;t Repeat Yourself， 是一种为程序员所熟悉的编程理念，优秀的程序员通常遵循这种规范编写代码。
&lt;code&gt;DRY&lt;/code&gt;可以显著地提升代码的可维护性，比如在需要改变某个参数的时候，只需要改动一处或者少数几处地方。&lt;/p&gt;

&lt;h2 id=&#34;3-css预处理器&#34;&gt;3.CSS预处理器&lt;/h2&gt;

&lt;p&gt;纯粹的&lt;code&gt;CSS&lt;/code&gt;代码并没有变量、嵌套、条件等概念，难以做到DRY, 这令程序员们头痛不已。因此，有程序员尝试为 &lt;code&gt;CSS&lt;/code&gt; 增加一些编程的的特性，使得在 &lt;code&gt;CSS&lt;/code&gt; 中使用变量、简单的程序逻辑、函数成为可能。&lt;/p&gt;

&lt;p&gt;目前，最常用的CSS预处理器，主要有3个：&lt;code&gt;Less&lt;/code&gt;、&lt;code&gt;SASS&lt;/code&gt;、&lt;code&gt;Stylus&lt;/code&gt;。
从&lt;a href=&#34;https://github.com/showcases/css-preprocessors&#34;&gt;GitHub&lt;/a&gt;上可以看出&lt;code&gt;Less&lt;/code&gt;是最受欢迎的&lt;code&gt;CSS&lt;/code&gt;预处理器。
&lt;img src=&#34;http://www.wangxingfeng.com/images/2017042301.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-less&#34;&gt;3.Less&lt;/h2&gt;

&lt;h3 id=&#34;3-1-安装&#34;&gt;3.1 安装&lt;/h3&gt;

&lt;p&gt;因为&lt;code&gt;Less&lt;/code&gt;是使用&lt;code&gt;JavaScript&lt;/code&gt;语言写的，它可以运行在服务端的&lt;code&gt;NodeJS&lt;/code&gt;环境中，因此，最简单的安装方式是用 &lt;code&gt;npm install&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g less # -g表示全局安装
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-2-编译&#34;&gt;3.2 编译&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Less&lt;/code&gt;文件的后缀名为&lt;code&gt;.less&lt;/code&gt;. 浏览器并不能直接识别&lt;code&gt;.less&lt;/code&gt;的文件，需要编译成&lt;code&gt;.css&lt;/code&gt;结尾的&lt;code&gt;CSS&lt;/code&gt;样式文件。
假设你已经有一个&lt;code&gt;less&lt;/code&gt;文件&lt;code&gt;demo.less&lt;/code&gt;，在命令行执行以下命令，即可编译生成&lt;code&gt;demo.css&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lessc demo.less demo.css  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;lessc&lt;/code&gt;是Less的命令，第一个参数demo.less为指定需要编译的源文件名， 第二个参数demo.css为编译后的CSS文件名。&lt;/p&gt;

&lt;p&gt;如果需要编译成压缩的CSS文件，可以全局安装下载一个Less官方提供的插件 &lt;a href=&#34;https://github.com/less/less-plugin-clean-css&#34;&gt;clean-css plugin&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g less-plugin-clean-css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，在命令行输入如下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lessc --clean-css demo.less demo.min.css #多了一个参数 --clean-css
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-3-基本语法&#34;&gt;3.3 基本语法&lt;/h3&gt;

&lt;h4 id=&#34;3-3-1-变量&#34;&gt;3.3.1 变量&lt;/h4&gt;

&lt;p&gt;Less 的变量名使用&lt;code&gt;@&lt;/code&gt;符号开始, 比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@nice-blue: #5B83AD;
@light-blue: @nice-blue + #111;

#header {
  color: @light-blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译之后，得到如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#header {
  color: #6c94be;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：Less的变量本质上是常量，只能定义 一次。&lt;/p&gt;

&lt;h4 id=&#34;3-3-2-mixins&#34;&gt;3.3.2 Mixins&lt;/h4&gt;

&lt;p&gt;将一系列属性从一个规则集引入(“混合”)到另一个规则集的方式。&lt;/p&gt;

&lt;p&gt;比如，先定义了一个规则&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.bordered {
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;想要在其他的地方使用到这个规则，可以这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#menu a {
  color: #111;
  .bordered;
}

.post a {
  color: red;
  .bordered;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.bordered {
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
#menu a {
  color: #111;
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
.post a {
  color: red;
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-3-3-嵌套&#34;&gt;3.3.3 嵌套&lt;/h4&gt;

&lt;p&gt;根据HTML结构来嵌套样式规则。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#header {
  color: black;
  .navigation {
    font-size: 12px;
  }
  .logo {
    width: 300px;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译之后的CSS样式文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#header {
  color: black;
}
#header .navigation {
  font-size: 12px;
}
#header .logo {
  width: 300px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还可以结合伪类来嵌套，比如“清除浮动”的样式可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.clearfix {
  display: block;
  zoom: 1;

  &amp;amp;:after {
    content: &amp;quot; &amp;quot;;
    display: block;
    font-size: 0;
    height: 0;
    clear: both;
    visibility: hidden;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上述代码里的符号&lt;code&gt;&amp;amp;&lt;/code&gt;表示当前选择器的父选择器。&lt;/p&gt;

&lt;p&gt;编译之后的结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.clearfix {
  display: block;
  zoom: 1;
}
.clearfix:after {
  content: &amp;quot; &amp;quot;;
  display: block;
  font-size: 0;
  height: 0;
  clear: both;
  visibility: hidden;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-3-4-媒体查询及嵌套&#34;&gt;3.3.4 媒体查询及嵌套&lt;/h4&gt;

&lt;p&gt;媒体查询（Media query ）可以嵌套在选择器中，编译时，会自动把选择器复制到媒体查询体内。媒体查询规则里还可以嵌套媒体查询。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.screen-color {
  @media screen {
    color: green;
    @media (min-width: 768px) {
      color: red;
    }
  }
  @media tv {
    color: black;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@media screen {
  .screen-color {
    color: green;
  }
}
@media screen and (min-width: 768px) {
  .screen-color {
    color: red;
  }
}
@media tv {
  .screen-color {
    color: black;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-3-5-运算&#34;&gt;3.3.5 运算&lt;/h4&gt;

&lt;p&gt;在Less中，数值、颜色、变量可以进行加、减、乘、除的运算。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@color: #224488 / 2; //results in #112244
background-color: #112244 + #111; // result is #223355

@base: 5%;
@filler: @base * 2; // result is 10%
@other: @base + @filler; // result is 15%
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-3-6-函数&#34;&gt;3.3.6 函数&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Less&lt;/code&gt;提供了许多用于转换颜色、处理字符串 以及进行算术运算的函数。具体可以参考&lt;a href=&#34;http://lesscss.org/functions/&#34;&gt;Less Function Reference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这些函数使用起来非常简单。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@base: #f04615;
@width: 0.5;

.class {
  width: percentage(@width); 
  color: saturate(@base, 5%);
  background-color: spin(lighten(@base, 25%), 8);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在上述代码中我们使用 函数&lt;code&gt;percentage()&lt;/code&gt; 将 0.5 转换为 50%，然后用 函数&lt;code&gt;saturate()&lt;/code&gt;将基础颜色值的饱和度增加了 5%，再使用 函数lighten() 将背景颜色的亮度增加了 25%，最后通过函数spin()又将色相值增加 8。编译之后：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.class {
  width: 50%;
  color: #f6430f;
  background-color: #f8b38d;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-5-官网&#34;&gt;3.5 官网&lt;/h3&gt;

&lt;p&gt;更多内容，可以访问&lt;a href=&#34;http://lesscss.org/&#34;&gt;http://lesscss.org/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>