<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Frank Wang&#39;s Coding World</title>
    <link>http://www.wangxingfeng.com/tags/javascript/index.xml</link>
    <description>Recent content in Javascript on Frank Wang&#39;s Coding World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="http://www.wangxingfeng.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JavaScript 的 Number 需要注意的一些特性</title>
      <link>http://www.wangxingfeng.com/js-number.html</link>
      <pubDate>Sun, 09 Jul 2017 21:45:51 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/js-number.html</guid>
      <description>

&lt;h2 id=&#34;一-nan&#34;&gt;一、NaN：&lt;/h2&gt;

&lt;p&gt;1.定义：&lt;code&gt;NaN&lt;/code&gt; 是 JavaScript 的一个特殊值，表示“非数字”（Not a Number），主要出现在将字符串解析成数字出错的场合。&lt;/p&gt;

&lt;p&gt;2.&lt;code&gt;NaN&lt;/code&gt; 不是一种独立的数据类型，而是一种特殊数值，它的数据类型依然属于 &lt;code&gt;number&lt;/code&gt; ，使用 &lt;code&gt;typeof&lt;/code&gt; 运算符可以看得很清楚。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typeof NaN // &#39;number&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.NaN不等于任何值，包括它本身。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NaN === NaN // false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.isNaN()：可以用来判断一个值是否为 NaN 。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt; 如果传入的非数值(如字符串），会先进行类型转换, 转成 NaN, 所以这个方法并不可靠！用 isNaN() 之前需要判断一下数据类型是否为 number 。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function isRealNaN(x){
    return typeof x === &amp;quot;number&amp;quot; &amp;amp;&amp;amp; isNaN(x);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者利用 只有 NaN 是JavaScript之中唯一不等于自身的值这个特点，进行判断。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function isTrueNaN(x){
    return x !== x;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;二-infinity-与-isfinite&#34;&gt;二、Infinity 与 isFinite()&lt;/h2&gt;

&lt;p&gt;1.&lt;code&gt;Infinity&lt;/code&gt;：表示“无穷”，是一个特殊的数值，用来表示两种场景。一种是一个正的数值太大，或一个负的数值太小，无法表示；另一种是非0数值除以0，得到 &lt;code&gt;Infinity&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;2.&lt;code&gt;isFinite()&lt;/code&gt;：返回一个&lt;code&gt;布尔值&lt;/code&gt;，检查某个值是不是&lt;code&gt;正常数值&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果对 &lt;code&gt;NaN&lt;/code&gt; 使用 &lt;code&gt;isFinite&lt;/code&gt; 函数，也返回 &lt;code&gt;false&lt;/code&gt;，表示 &lt;code&gt;NaN&lt;/code&gt; 不是一个正常值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;isFinite(Infinity) // false
isFinite(NaN) // false
isFinite(&amp;quot;abc&amp;quot;) // false
isFinite(undefined) //false
isFinite({}) //false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意参数为 &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; 时返回 &lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;isFinite(true) // true
isFinite(false)// true
isFinite(null) //true
isFinite([]) //true
isFinite(&amp;quot;&amp;quot;) //true
isFinite(-1) // true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;三-parseint-和parsefloat&#34;&gt;三、 parseInt() 和parseFloat()&lt;/h2&gt;

&lt;p&gt;1.&lt;code&gt;parseInt()&lt;/code&gt; 用于将&lt;code&gt;字符串&lt;/code&gt;转为&lt;code&gt;整数&lt;/code&gt;; &lt;code&gt;parseFloat()&lt;/code&gt;用于将&lt;code&gt;字符串&lt;/code&gt;转为&lt;code&gt;浮点数&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parseInt(&#39;123&#39;) // 123
parseFloat(&#39;3.14&#39;) // 3.14
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.字符串转为整数或浮点数的时候，是&lt;code&gt;一个个字符依次转换&lt;/code&gt;，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parseInt(&#39;15px&#39;) // 15
parseFloat(&#39;3.14abcd &#39;) // 3.14
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.如果字符串前后有&lt;code&gt;空格&lt;/code&gt;，空格会被自动去除。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parseInt(&#39;   81&#39;) // 81
parseFloat(&#39;\t\v\r12.34\n &#39;) // 12.34
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.如果字符串的第一个字符不能转化为数字（后面跟着数字的正负号除外），返回&lt;code&gt;NaN&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parseInt(&#39;abc&#39;) // NaN
parseInt(&#39;.3&#39;) // NaN
parseInt(&#39;&#39;) // NaN
parseInt(&#39;+&#39;) // NaN
parseInt(&#39;+1&#39;) // 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.对于那些会自动转为&lt;code&gt;科学计数法&lt;/code&gt;的数字，parseInt()会将科学计数法的表示方法视为字符串，因此导致一些奇怪的结果。如果字符串符合科学计数法，parseFloat())则会进行相应的转换。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parseInt(1000000000000000000000.5) // 1
// 等同于
parseInt(&#39;1e+21&#39;) // 1

parseFloat(&#39;314e-2&#39;) // 3.14
parseFloat(&#39;0.0314E+2&#39;) // 3.14
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6.&lt;code&gt;parseInt()&lt;/code&gt;还可以接受第二个参数（2到36之间），表示被解析的值的进制，返回该值对应的十进制数。默认情况下，&lt;code&gt;parseInt&lt;/code&gt;的第二个参数为10，即默认是十进制转十进制。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parseInt(&#39;1000&#39;) // 1000
// 等同于
parseInt(&#39;1000&#39;, 10) // 1000
parseInt(&#39;1000&#39;, 2) // 8
parseInt(&#39;1000&#39;, 6) // 216
parseInt(&#39;1000&#39;, 8) // 512
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7.如果字符串包含对于指定进制无意义的字符，则从最高位开始，只返回可以转换的数值。如果最高位无法转换，则直接返回&lt;code&gt;NaN&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parseInt(&#39;1546&#39;, 2) // 1
parseInt(&#39;546&#39;, 2) // NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;8.如果&lt;code&gt;parseInt()&lt;/code&gt;的第一个参数不是字符串，会被先转为字符串。这会导致一些令人意外的结果。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parseInt(0x11, 36) // 43
// 等同于
parseInt(&#39;17&#39;, 36)
parseInt(String(0x11), 36)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;9.如果参数不是字符串，或者字符串的第一个字符不能转化为浮点数，则&lt;code&gt;parseFloat()&lt;/code&gt;返回&lt;code&gt;NaN&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parseFloat([]) // NaN
parseFloat(&#39;FF2&#39;) // NaN
parseFloat(&#39;&#39;) // NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;四-强制类型转换的函数-number&#34;&gt;四、强制类型转换的函数：Number()&lt;/h2&gt;

&lt;p&gt;1.Number(): 可以将任意类型的值转化成数值。&lt;/p&gt;

&lt;p&gt;2.&lt;code&gt;Number()&lt;/code&gt;将字符串转为数值，要比&lt;code&gt;parseInt()&lt;/code&gt;严格很多。基本上，只要有一个字符无法转成数值，整个&lt;code&gt;字符串&lt;/code&gt;就会被转为&lt;code&gt;NaN&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parseFloat(&#39;123.45#&#39;) // 123.45
Number(&#39;123.45#&#39;) // NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.如果&lt;code&gt;Number()&lt;/code&gt;的参数是&lt;code&gt;null&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;&#39;&#39;&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt; 则结果为&lt;code&gt;0&lt;/code&gt;；如果为 &lt;code&gt;true&lt;/code&gt;，则结果为 &lt;code&gt;1&lt;/code&gt;。&lt;code&gt;parseInt()&lt;/code&gt;/&lt;code&gt;parseFloat()&lt;/code&gt;的参数如果是这些特殊值时，一律为 &lt;code&gt;NaN&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Number(null)  //0
Number(&amp;quot;&amp;quot;)   //0
Number(false)   //0
Number([])   //0
Number(true) // 1

parseInt(null) // NaN
parseFloat(null) // NaN
parseInt(&amp;quot;&amp;quot;) // NaN
parseFloat(&amp;quot;&amp;quot;) // NaN
parseInt(false) // NaN
parseFloat(false) // NaN
parseInt([]) // NaN
parseFloat([]) // NaN
parseInt(true)  // NaN
parseFloat(true)  // NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.&lt;code&gt;Number()&lt;/code&gt;跟&lt;code&gt;parseInt()&lt;/code&gt;、&lt;code&gt;parseFloat()&lt;/code&gt;一样，会自动过滤字符串前后的&lt;code&gt;空格&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Number(&#39;\t\v\r12.34\n&#39;) // 12.34
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.如果参数是&lt;code&gt;对象&lt;/code&gt;时，将返回&lt;code&gt;NaN&lt;/code&gt;，除非是包含&lt;code&gt;单个数值的数组&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Number({a: 1}) // NaN
Number([1, 2, 3]) // NaN
Number([5]) // 5
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>两个Safari浏览器不兼容的坑</title>
      <link>http://www.wangxingfeng.com/safari-not-support.html</link>
      <pubDate>Thu, 01 Jun 2017 07:35:15 +0800</pubDate>
      
      <guid>http://www.wangxingfeng.com/safari-not-support.html</guid>
      <description>

&lt;h2 id=&#34;一-苹果手机的safari浏览器不兼容-new-date-日期转换格式的坑&#34;&gt;一、 苹果手机的Safari浏览器不兼容  new Date()日期转换格式的坑&lt;/h2&gt;

&lt;p&gt;做Web项目的开发，&lt;code&gt;倒计时&lt;/code&gt;是个很常见的需求。我的需求是做一个演唱会门票开售时间的倒计时。&lt;/p&gt;

&lt;h3 id=&#34;思路如下&#34;&gt;思路如下：&lt;/h3&gt;

&lt;p&gt;取到 &lt;code&gt;开售时间&lt;/code&gt;和&lt;code&gt;服务器上现在的时间&lt;/code&gt;，用&lt;code&gt;开售时间&lt;/code&gt;减去&lt;code&gt;现在的时间&lt;/code&gt;，得出一个时间毫秒数，然后再转换成xx天xx小时xx分xx秒。&lt;/p&gt;

&lt;p&gt;跟后台技术小哥简单沟通了一下，后台会将&lt;code&gt;开售时间&lt;/code&gt;和&lt;code&gt;现在的时间&lt;/code&gt;传到页面上，放在&lt;code&gt;隐藏域&lt;/code&gt;里，这样我用JavaScript就能取到时间了。so easy! 然后我就开始写代码了。&lt;/p&gt;

&lt;p&gt;一开始我是这样写的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function preSellCount(){
    // 如果没有设置开售时间，则取演出时间，取到的时间格式为2017-06-01 10:00
    var preSt = $(&#39;#preSellTime&#39;).val() || $(&#39;#showTime&#39;).val();  

    var nowTime = $(&#39;#nowTime&#39;).val();

    // 如果没有设置开售时间，也没有设置演出的时间，则倒计时处显示“开售时间待定”
    if (!preSt) {
        $(&#39;#preSellCount&#39;).text(&amp;quot;开售时间待定&amp;quot;);
    }else{

        //取到的开售时间是一个字符串，先转换成毫秒数，
        var sellTime = new Date(preSt).getTime();

        //现在的毫秒数
        var now = new Date(nowTime).getTime();

        var count, d, h, min, sec, timeStr, timer;

        count = now &amp;gt; sellTime ? 0 : Math.floor((sellTime-now)/1000);

        //进来页面的时间不为零，才执行定时器
        if(count!==0){
            // 定时器
            timer = setInterval(function() {
                if (count === 0) {
                    clearInterval(timer);

                    // 倒计时为零时，自动刷新页面
                    window.location.reload();
                }else{
                    
                    // 天数
                    d = Math.floor(count/86400); 

                    // 小时数
                    h = Math.floor(count%86400/3600); 

                    // 分钟数
                    min = Math.floor(count%86400%3600/60); 

                    // 秒钟数
                    sec = Math.floor(count%86400%3600%60);

                    // 小于10的时候，前面补一个‘0’。
                    if (min &amp;lt; 10) {
                        min = &#39;0&#39; + min;
                    }
                    if (sec &amp;lt; 10 ) {
                        sec = &#39;0&#39; + sec;
                    }

                    if (d == 0) {
                        timeStr =  h + &amp;quot;小时&amp;quot; + min + &amp;quot;分&amp;quot; + s + &amp;quot;秒&amp;quot;;
                    }else{
                        timeStr = d + &amp;quot;天&amp;quot; + h + &amp;quot;小时&amp;quot; + min + &amp;quot;分&amp;quot; + s + &amp;quot;秒&amp;quot;;
                    }
                    // 得到倒计时的时间字符串
                    timeStr = d + &amp;quot;天&amp;quot; + h + &amp;quot;小时&amp;quot; + min + &amp;quot;分&amp;quot; + sec + &amp;quot;秒&amp;quot;;

                    // 将字倒计时显示到页面上
                    $(&#39;#preSellCount&#39;).text(timeStr);

                    count -= 1;
                }
            }, 1000);
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用 Chrome 模拟各种手机调试都是一切正常。发布到本地测试环境，然后用自己的安卓手机访问，也一切正常。再用同事的苹果手机测试，倒计时不显示。WTF?&lt;/p&gt;

&lt;p&gt;想想哪里可能会有兼容性问题呢？&lt;/p&gt;

&lt;p&gt;从头检查一遍代码。获取开售时间没有问题。取到的开售时间是一个字符串的日期，用&lt;code&gt;new Date(preSt).getTime()&lt;/code&gt;转换成毫秒数，有没有问题呢？Google一下&lt;code&gt;new Date() iOS&lt;/code&gt;。
果然发现有不少相关文章提到iOS下日期转换问题。由于Safari在iOS5及以下对&lt;code&gt;YYYY-MM-DD&lt;/code&gt;格式的日期不支持，所以需要转换格式。&lt;/p&gt;

&lt;p&gt;最简单的是用&lt;code&gt;正则表达式&lt;/code&gt;把日期转换成 &lt;code&gt;YYYY/MM/DD&lt;/code&gt;格式。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
    preSt.replace(/-/g, &amp;quot;/&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最终的代码是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
function preSellCount(){
    // 如果没有设置开售时间，则取演出时间，取到的时间格式为2017-06-01 10:00
    var preSt = $(&#39;#preSellTime&#39;).val() || $(&#39;#showTime&#39;).val();  
    var nowTime = $(&#39;#nowTime&#39;).val();
    // 如果没有设置开售时间，也没有设置演出的时间，则倒计时处显示“开售时间待定”
    if (!preSt) {
        $(&#39;#preSellCount&#39;).text(&amp;quot;开售时间待定&amp;quot;);
    }else{

        //取到的开售时间是一个字符串，先转换成毫秒数，
        var sellTime = new Date(preSt.replace(/-/g, &amp;quot;/&amp;quot;)).getTime();

        //现在的毫秒数
        var now = new Date(nowTime.replace(/-/g, &amp;quot;/&amp;quot;)).getTime();

        var count, d, h, min, sec, timeStr, timer;

        count = now &amp;gt; sellTime ? 0 : Math.floor((sellTime-now)/1000);

        //进来页面的时间不为零，才执行定时器
        if(count!==0){
            // 定时器
            timer = setInterval(function() {
                if (count === 0) {
                    clearInterval(timer);

                    // 倒计时为零时，自动刷新页面
                    window.location.reload();
                }else{
                    
                    // 天数
                    d = Math.floor(count/86400); 

                    // 小时数
                    h = Math.floor(count%86400/3600); 

                    // 分钟数
                    min = Math.floor(count%86400%3600/60); 

                    // 秒钟数
                    sec = Math.floor(count%86400%3600%60);

                    // 小于10的时候，前面补一个‘0’。
                    if (min &amp;lt; 10) {
                        min = &#39;0&#39; + min;
                    }
                    if (sec &amp;lt; 10 ) {
                        sec = &#39;0&#39; + sec;
                    }

                    if (d == 0) {
                        timeStr =  h + &amp;quot;小时&amp;quot; + min + &amp;quot;分&amp;quot; + s + &amp;quot;秒&amp;quot;;
                    }else{
                        timeStr = d + &amp;quot;天&amp;quot; + h + &amp;quot;小时&amp;quot; + min + &amp;quot;分&amp;quot; + s + &amp;quot;秒&amp;quot;;
                    }
                    // 得到倒计时的时间字符串
                    timeStr = d + &amp;quot;天&amp;quot; + h + &amp;quot;小时&amp;quot; + min + &amp;quot;分&amp;quot; + sec + &amp;quot;秒&amp;quot;;

                    // 将字倒计时显示到页面上
                    $(&#39;#preSellCount&#39;).text(timeStr);

                    count -= 1;
                }
            }, 1000);
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;二-苹果手机的safari浏览器不支持-keydown-keypress-keyup-change等事件的坑&#34;&gt;二、苹果手机的Safari浏览器不支持  keydown, keypress, keyup, change等事件的坑。&lt;/h2&gt;

&lt;p&gt;需求:在输入框中输入内容时，输入框后边显示清除按钮，点击可以清除输入框中的所有内容&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var keyword = $(&amp;quot;#search-keyword&amp;quot;);
var clear = $(&#39;.clear&#39;);

keyword.on(&#39;keyup&#39;, function(event) {
    if($(this).val().length&amp;gt;0){

        //显示清空输入框的小图标
        clear.show();

    }else{

        // 隐藏清空输入框的小图标
        clear.hide();
    }
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是在 iOS 的 Safari 中, keydown、keypress、 keyup、change等事件都无效，考虑监听 input 和 propertychange 事件作为代替。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var keyword = $(&amp;quot;#search-keyword&amp;quot;);
var clear = $(&#39;.clear&#39;);

keyword.on(&#39;input propertychange&#39;, function(event) {
    if($(this).val().length&amp;gt;0){
        //显示清空输入框的小图标
        clear.show();
    }else{
        // 隐藏清空输入框的小图标
        clear.hide();
    }
});

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>